function solution(n) {
  let dp = new Array(n);
  
  dp[0] = 1;
  dp[1] = 2;
  
  for (let i=2; i<=n; i++) {
      dp[i] = (dp[i-1] % 1000000007) + (dp[i-2] % 1000000007);
  }
  
  return dp[n-1] % 1000000007
}

/*
정확성  테스트
테스트 1 〉	통과 (0.51ms, 33.7MB)
테스트 2 〉	통과 (0.19ms, 33.5MB)
테스트 3 〉	통과 (0.43ms, 33.5MB)
테스트 4 〉	통과 (0.62ms, 33.7MB)
테스트 5 〉	통과 (0.28ms, 33.5MB)
테스트 6 〉	통과 (0.55ms, 33.6MB)
테스트 7 〉	통과 (0.22ms, 33.5MB)
테스트 8 〉	통과 (0.47ms, 33.5MB)
테스트 9 〉	통과 (0.48ms, 33.7MB)
테스트 10 〉	통과 (0.67ms, 33.7MB)
테스트 11 〉	통과 (0.39ms, 33.5MB)
테스트 12 〉	통과 (0.21ms, 33.5MB)
테스트 13 〉	통과 (0.26ms, 33.5MB)
테스트 14 〉	통과 (0.67ms, 33.5MB)
효율성  테스트
테스트 1 〉	통과 (2.34ms, 36.8MB)
테스트 2 〉	통과 (2.59ms, 37MB)
테스트 3 〉	통과 (2.38ms, 36.8MB)
테스트 4 〉	통과 (2.29ms, 36.6MB)
테스트 5 〉	통과 (2.88ms, 37.1MB)
테스트 6 〉	통과 (3.03ms, 37.5MB)
채점 결과
정확성: 70.0
효율성: 30.0
합계: 100.0 / 100.0
*/


/* 다른 방식 */
function solution(n) {
  let dp = new Array(n+1);
  
  for (let i=0; i<dp.length; i++) {
      dp[i] = new Array(2).fill(0);
  }
  
  dp[1][0] = 1;
  dp[2][0] = 1;
  dp[2][1] = 1;
  
  for (let i=3; i<=n; i++) {
      dp[i][0] = (dp[i-1][0] % 1000000007) + (dp[i-1][1] % 1000000007);
      dp[i][1] = (dp[i-2][0] % 1000000007) + (dp[i-2][1] % 1000000007);
  }
  
  return (dp[n][0] + dp[n][1]) % 1000000007;
}