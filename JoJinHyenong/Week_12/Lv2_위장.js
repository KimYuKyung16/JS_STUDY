function solution(clothes) {
    let answer =1;                  // 무조건 하나는 입음
    const map = new Map();          // map 객체 생성
    for(let [c,n] of clothes){       
        if(map.has(n)) map.set(n,map.get(n)+1); // 객체에 옷종류가 중복되면 해당 value에 +1을 해준다.
        else map.set(n,1);  // 없다면 새로운 키와 값 추가
    }
    for(let x of map.values()) answer *= (x+1);     // 안입는 경우도 포함을 해야되기 때문에 +1을 해준다.  
  return answer - 1;        //하지만 최소한 한개는 입어야하니깐 모든 경우에서 (하나도 안입는 경우)-1을 해준다.
}

// 정확성  테스트
// 테스트 1 〉	통과 (0.18ms, 33.7MB)
// 테스트 2 〉	통과 (0.26ms, 33.5MB)
// 테스트 3 〉	통과 (0.18ms, 33.5MB)
// 테스트 4 〉	통과 (0.19ms, 33.6MB)
// 테스트 5 〉	통과 (0.12ms, 33.4MB)
// 테스트 6 〉	통과 (0.07ms, 33.6MB)
// 테스트 7 〉	통과 (0.19ms, 33.5MB)
// 테스트 8 〉	통과 (0.27ms, 33.4MB)
// 테스트 9 〉	통과 (0.11ms, 33.4MB)
// 테스트 10 〉	통과 (0.07ms, 33.6MB)
// 테스트 11 〉	통과 (0.10ms, 33.5MB)
// 테스트 12 〉	통과 (0.25ms, 33.5MB)
// 테스트 13 〉	통과 (0.25ms, 33.5MB)
// 테스트 14 〉	통과 (0.07ms, 33.4MB)
// 테스트 15 〉	통과 (0.10ms, 33.4MB)
// 테스트 16 〉	통과 (0.10ms, 33.6MB)
// 테스트 17 〉	통과 (0.28ms, 33.4MB)
// 테스트 18 〉	통과 (0.27ms, 33.5MB)
// 테스트 19 〉	통과 (0.11ms, 33.6MB)
// 테스트 20 〉	통과 (0.10ms, 33.5MB)
// 테스트 21 〉	통과 (0.10ms, 33.5MB)
// 테스트 22 〉	통과 (0.10ms, 33.4MB)
// 테스트 23 〉	통과 (0.09ms, 33.6MB)
// 테스트 24 〉	통과 (0.08ms, 33.6MB)
// 테스트 25 〉	통과 (0.23ms, 33.5MB)
// 테스트 26 〉	통과 (0.29ms, 33.5MB)
// 테스트 27 〉	통과 (0.07ms, 33.5MB)
// 테스트 28 〉	통과 (0.18ms, 33.5MB)
// 채점 결과
// 정확성: 100.0
// 합계: 100.0 / 100.0