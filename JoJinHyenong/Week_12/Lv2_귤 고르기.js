function solution(k, tangerine) {
    tangerine.sort((a,b)=>a-b);     //오름차순으로 정렬
    let array=[];
    let p1=1;                       //투 포인트 방식으로 풀 예정 -> p1을 tangerine[1]
    let p2=0;                       // p2를 tnagerine[0]으로 해서 비교 시작
    while(p1<=tangerine.length){    // 만약 p1이 배열의 길이보다 커지면 종료
        if(tangerine[p1]!==tangerine[p2]){      // p1값과 p2값이 다르면 귤의 크기가 다르다는 뜻이므로 길이측정 
           array.push(p1-p2);
           p2=p1;                   // 시작점을 같게 해준후 다시 실행
        }else{                      // p1과 p2가 같으면 귤의 크기 같다는 뜻이므로 p1만 1씩 증가
            p1++;
        }
    }
    array.sort((a,b)=>b-a);         // 내림차순으로 정렬
    let count=0;
    let answer=0;
    for(let i=0;i<array.length;i++){
        if (count < k) {            // k보다 작을 경우에는 상자에 담김.
          count += array[i];
          answer ++;
      } else break;
    }
    return answer;
}

// 정확성  테스트
// 테스트 1 〉	통과 (49.84ms, 39.4MB)
// 테스트 2 〉	통과 (44.78ms, 39.4MB)
// 테스트 3 〉	통과 (35.81ms, 39.5MB)
// 테스트 4 〉	통과 (35.88ms, 39.5MB)
// 테스트 5 〉	통과 (27.71ms, 39.4MB)
// 테스트 6 〉	통과 (30.31ms, 39.3MB)
// 테스트 7 〉	통과 (26.01ms, 39.4MB)
// 테스트 8 〉	통과 (29.83ms, 39.3MB)
// 테스트 9 〉	통과 (33.25ms, 39.1MB)
// 테스트 10 〉	통과 (23.05ms, 39.4MB)
// 테스트 11 〉	통과 (0.17ms, 33.4MB)
// 테스트 12 〉	통과 (0.09ms, 33.5MB)
// 테스트 13 〉	통과 (0.07ms, 33.5MB)
// 테스트 14 〉	통과 (0.07ms, 33.4MB)
// 테스트 15 〉	통과 (0.11ms, 33.5MB)
// 테스트 16 〉	통과 (0.07ms, 33.4MB)
// 테스트 17 〉	통과 (0.07ms, 33.5MB)
// 테스트 18 〉	통과 (0.07ms, 33.6MB)
// 테스트 19 〉	통과 (0.07ms, 33.6MB)
// 테스트 20 〉	통과 (0.09ms, 33.4MB)
// 테스트 21 〉	통과 (0.49ms, 33.6MB)
// 테스트 22 〉	통과 (0.77ms, 33.5MB)
// 테스트 23 〉	통과 (0.59ms, 33.5MB)
// 테스트 24 〉	통과 (0.64ms, 33.6MB)
// 테스트 25 〉	통과 (13.70ms, 36.8MB)
// 테스트 26 〉	통과 (12.81ms, 37.6MB)
// 테스트 27 〉	통과 (47.83ms, 42.1MB)
// 테스트 28 〉	통과 (59.07ms, 40.2MB)
// 테스트 29 〉	통과 (50.20ms, 41.9MB)
// 테스트 30 〉	통과 (50.73ms, 42.1MB)
// 테스트 31 〉	통과 (31.75ms, 39.7MB)
// 테스트 32 〉	통과 (40.23ms, 39.8MB)
// 테스트 33 〉	통과 (76.02ms, 42.1MB)
// 테스트 34 〉	통과 (52.45ms, 42MB)
// 채점 결과
// 정확성: 100.0
// 합계: 100.0 / 100.0