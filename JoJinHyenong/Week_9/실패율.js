function solution(N, stages) {
    let array=[];
    let num = stages.length; // 
    for(let i=1;i<=N;i++){
        let a = stages.filter((item,index,arr)=>{   //각 스테이지에 통과 못한 사람 구하기
            if(item===i){
                return item;
            }
        });
        array.push([a.length/num,i]);   // 스테이지 실패율과 몇번째 스테이지인진 확인
        num = num-a.length;     // 전체 인원 - 통과 못한 사람의 수
    }
        array= array.sort((a,b)=>b[0]-a[0]);    // 실패율을 내림차순으롤 변경 
        return array.map((item)=>item[1]);       // 몇번째 스테이지인지만 추출
}

// 정확성  테스트
// 테스트 1 〉	통과 (0.20ms, 33.6MB)
// 테스트 2 〉	통과 (0.67ms, 33.5MB)
// 테스트 3 〉	통과 (55.01ms, 36.1MB)
// 테스트 4 〉	통과 (293.43ms, 38.4MB)
// 테스트 5 〉	통과 (1313.26ms, 42.1MB)
// 테스트 6 〉	통과 (2.13ms, 35.4MB)
// 테스트 7 〉	통과 (13.42ms, 35.9MB)
// 테스트 8 〉	통과 (362.24ms, 38.4MB)
// 테스트 9 〉	통과 (1361.25ms, 42.2MB)
// 테스트 10 〉	통과 (116.75ms, 38.2MB)
// 테스트 11 〉	통과 (336.13ms, 38.5MB)
// 테스트 12 〉	통과 (236.53ms, 38.8MB)
// 테스트 13 〉	통과 (437.86ms, 40.1MB)
// 테스트 14 〉	통과 (0.27ms, 33.6MB)
// 테스트 15 〉	통과 (14.09ms, 37.3MB)
// 테스트 16 〉	통과 (7.64ms, 37.8MB)
// 테스트 17 〉	통과 (15.49ms, 37.8MB)
// 테스트 18 〉	통과 (7.44ms, 37.7MB)
// 테스트 19 〉	통과 (2.40ms, 35.6MB)
// 테스트 20 〉	통과 (12.68ms, 38.3MB)
// 테스트 21 〉	통과 (21.87ms, 38.3MB)
// 테스트 22 〉	통과 (1200.10ms, 45.3MB)
// 테스트 23 〉	통과 (22.09ms, 43.3MB)
// 테스트 24 〉	통과 (60.24ms, 41.2MB)
// 테스트 25 〉	통과 (0.10ms, 33.5MB)
// 테스트 26 〉	통과 (0.08ms, 33.6MB)
// 테스트 27 〉	통과 (0.07ms, 33.5MB)
// 채점 결과
// 정확성: 100.0
// 합계: 100.0 / 100.0