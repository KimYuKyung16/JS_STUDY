function solution(s) {
    let array=[];
    let answer=[];
    for(let i=0;i<s.length;i++){
        if(!array.includes(s[i])){
            array.push(s[i]);
            answer.push(-1);
        }else{
            answer.push((i+1)-(array.lastIndexOf(s[i])+1));
            array.push(s[i]);
        }
    }return answer;
}

// 1. 숫자를 넣을 answer 배열과 기존 배열과 비교할 array 배열 하나를 만든다.
// 2. 기존배열 앞에서부터 하나씩 array 배열에 push 하면서 동일한 문자가 없으면 answer배열에 -1 push
// 3. 동일한 문자 생기면 array배열에서 해당 문자의 마지막 인덱스 번호를 찾은 후 현재 for문의 i와 빼준다.
// 정확성  테스트
// 테스트 1 〉	통과 (0.05ms, 33.7MB)
// 테스트 2 〉	통과 (0.17ms, 33.5MB)
// 테스트 3 〉	통과 (0.17ms, 33.5MB)
// 테스트 4 〉	통과 (0.61ms, 33.8MB)
// 테스트 5 〉	통과 (10.61ms, 38.7MB)
// 테스트 6 〉	통과 (2.16ms, 37.2MB)
// 테스트 7 〉	통과 (9.85ms, 38.7MB)
// 테스트 8 〉	통과 (1.75ms, 37.2MB)
// 테스트 9 〉	통과 (9.84ms, 38.6MB)
// 테스트 10 〉	통과 (1.05ms, 33.8MB)
// 테스트 11 〉	통과 (10.03ms, 38.8MB)
// 테스트 12 〉	통과 (0.05ms, 33.4MB)
// 테스트 13 〉	통과 (0.05ms, 33.4MB)
// 테스트 14 〉	통과 (0.61ms, 33.5MB)
// 테스트 15 〉	통과 (0.08ms, 33.4MB)
// 테스트 16 〉	통과 (0.13ms, 33.4MB)
// 테스트 17 〉	통과 (0.16ms, 33.4MB)
// 테스트 18 〉	통과 (1.65ms, 33.7MB)
// 테스트 19 〉	통과 (1.17ms, 33.8MB)
// 테스트 20 〉	통과 (0.33ms, 33.5MB)
// 테스트 21 〉	통과 (0.20ms, 33.4MB)
// 테스트 22 〉	통과 (5.03ms, 37.4MB)
// 테스트 23 〉	통과 (0.33ms, 33.5MB)
// 테스트 24 〉	통과 (0.41ms, 33.6MB)
// 테스트 25 〉	통과 (0.50ms, 33.5MB)
// 테스트 26 〉	통과 (0.19ms, 33.5MB)
// 테스트 27 〉	통과 (0.47ms, 33.7MB)
// 테스트 28 〉	통과 (0.43ms, 33.7MB)
// 테스트 29 〉	통과 (0.07ms, 33.5MB)
// 테스트 30 〉	통과 (9.92ms, 38.8MB)
// 채점 결과
// 정확성: 100.0
// 합계: 100.0 / 100.0