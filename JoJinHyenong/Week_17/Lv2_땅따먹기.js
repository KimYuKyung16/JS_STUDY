function solution(land) {
    for (let i = 1; i < land.length; i++) {   // 최댓값을 구하고 다음 행에서 이전 행의 최댓값의 열을 제외하고 모두 더해준다.
      land[i][0] += Math.max(land[i-1][1], land[i-1][2], land[i-1][3]);
      land[i][1] += Math.max(land[i-1][0], land[i-1][2], land[i-1][3]);
      land[i][2] += Math.max(land[i-1][0], land[i-1][1], land[i-1][3]);
      land[i][3] += Math.max(land[i-1][0], land[i-1][1], land[i-1][2]);
    }
    return Math.max(...land[land.length-1]);
  }

//   정확성  테스트
// 테스트 1 〉	통과 (0.74ms, 33.8MB)
// 테스트 2 〉	통과 (1.19ms, 33.8MB)
// 테스트 3 〉	통과 (1.27ms, 33.8MB)
// 테스트 4 〉	통과 (0.67ms, 33.8MB)
// 테스트 5 〉	통과 (0.68ms, 33.8MB)
// 테스트 6 〉	통과 (0.74ms, 33.8MB)
// 테스트 7 〉	통과 (0.66ms, 33.8MB)
// 테스트 8 〉	통과 (0.69ms, 33.8MB)
// 테스트 9 〉	통과 (0.67ms, 33.8MB)
// 테스트 10 〉	통과 (1.23ms, 33.8MB)
// 테스트 11 〉	통과 (0.66ms, 33.9MB)
// 테스트 12 〉	통과 (1.29ms, 33.8MB)
// 테스트 13 〉	통과 (0.82ms, 33.7MB)
// 테스트 14 〉	통과 (1.25ms, 33.8MB)
// 테스트 15 〉	통과 (0.69ms, 33.8MB)
// 테스트 16 〉	통과 (0.71ms, 33.7MB)
// 테스트 17 〉	통과 (0.68ms, 33.8MB)
// 테스트 18 〉	통과 (0.67ms, 33.8MB)
// 효율성  테스트
// 테스트 1 〉	통과 (24.42ms, 77.5MB)
// 테스트 2 〉	통과 (24.46ms, 77.8MB)
// 테스트 3 〉	통과 (39.63ms, 80.4MB)
// 테스트 4 〉	통과 (45.34ms, 80.3MB)
// 채점 결과
// 정확성: 59.8
// 효율성: 40.2
// 합계: 100.0 / 100.0