function solution(t, p) {
    let answer=[];
    let x = t.split('')
    for(let i=0,len=x.length;i<len;i++){
        if(x.length>=p.length){
            let array = Number(x.slice(-p.length).join(''));
            x.pop();
            answer.push(array); 
        }
    }
    return answer.filter((item,index)=>{
        return item<=p
    }).length
}
// pop을 하면 배열의 길이가 달라지기 때문에 for문안에 배열 길이를 미리 선언해줘서 변하지 않게 해준다.

// 정확성  테스트
// 테스트 1 〉	통과 (1.96ms, 34.3MB)
// 테스트 2 〉	통과 (5.00ms, 37.7MB)
// 테스트 3 〉	통과 (4.23ms, 37.7MB)
// 테스트 4 〉	통과 (1.94ms, 34.4MB)
// 테스트 5 〉	통과 (1.60ms, 34.3MB)
// 테스트 6 〉	통과 (6.49ms, 37.6MB)
// 테스트 7 〉	통과 (7.92ms, 38.1MB)
// 테스트 8 〉	통과 (2.95ms, 34.2MB)
// 테스트 9 〉	통과 (0.97ms, 33.9MB)
// 테스트 10 〉	통과 (0.31ms, 33.6MB)
// 테스트 11 〉	통과 (4.18ms, 34.5MB)
// 테스트 12 〉	통과 (8.19ms, 38MB)
// 테스트 13 〉	통과 (4.57ms, 34.7MB)
// 테스트 14 〉	통과 (3.51ms, 34.5MB)
// 테스트 15 〉	통과 (2.44ms, 34.5MB)
// 테스트 16 〉	통과 (2.42ms, 34.5MB)
// 테스트 17 〉	통과 (11.93ms, 37.9MB)
// 테스트 18 〉	통과 (7.66ms, 37.6MB)
// 테스트 19 〉	통과 (1.04ms, 33.9MB)
// 테스트 20 〉	통과 (0.75ms, 33.8MB)
// 테스트 21 〉	통과 (0.18ms, 33.5MB)
// 테스트 22 〉	통과 (0.52ms, 33.5MB)
// 테스트 23 〉	통과 (1.00ms, 33.9MB)
// 테스트 24 〉	통과 (0.19ms, 33.5MB)
// 테스트 25 〉	통과 (0.31ms, 33.6MB)
// 테스트 26 〉	통과 (0.19ms, 33.5MB)
// 테스트 27 〉	통과 (0.19ms, 33.4MB)
// 테스트 28 〉	통과 (0.18ms, 33.4MB)
// 테스트 29 〉	통과 (0.19ms, 33.5MB)
// 테스트 30 〉	통과 (0.76ms, 33.7MB)
// 테스트 31 〉	통과 (0.06ms, 33.6MB)
// 테스트 32 〉	통과 (0.07ms, 33.5MB)
// 테스트 33 〉	통과 (0.07ms, 33.6MB)
// 테스트 34 〉	통과 (0.17ms, 33.4MB)
// 테스트 35 〉	통과 (0.17ms, 33.5MB)
// 테스트 36 〉	통과 (0.17ms, 33.6MB)
// 테스트 37 〉	통과 (0.15ms, 33.5MB)
// 테스트 38 〉	통과 (0.18ms, 33.5MB)
// 채점 결과
// 정확성: 100.0
// 합계: 100.0 / 100.0