function solution(n, left, right) {
    let answer = [];
    for(let i=left; i<=right; i++)
        answer.push(Math.max(Number.parseInt(i / n), i % n) + 1);   //배열 좌표중 최대값을 찾으면 된다. 예를 들어 (0,3)이면 최대값은 3이지만 시작 배열이 1부터 시작하기 때문에 +1을 해준다.
    return answer;
}

// 정확성  테스트
// 테스트 1 〉	통과 (7.14ms, 43.7MB)
// 테스트 2 〉	통과 (25.77ms, 52.8MB)
// 테스트 3 〉	통과 (28.13ms, 52.4MB)
// 테스트 4 〉	통과 (0.13ms, 33.6MB)
// 테스트 5 〉	통과 (0.12ms, 33.5MB)
// 테스트 6 〉	통과 (6.01ms, 43.7MB)
// 테스트 7 〉	통과 (6.83ms, 43.9MB)
// 테스트 8 〉	통과 (6.12ms, 44MB)
// 테스트 9 〉	통과 (6.09ms, 44.4MB)
// 테스트 10 〉	통과 (6.10ms, 44.2MB)
// 테스트 11 〉	통과 (6.02ms, 44MB)
// 테스트 12 〉	통과 (7.36ms, 47MB)
// 테스트 13 〉	통과 (6.87ms, 47.5MB)
// 테스트 14 〉	통과 (6.23ms, 44.5MB)
// 테스트 15 〉	통과 (6.39ms, 49.8MB)
// 테스트 16 〉	통과 (6.93ms, 49.7MB)
// 테스트 17 〉	통과 (6.86ms, 44.9MB)
// 테스트 18 〉	통과 (6.50ms, 49.5MB)
// 테스트 19 〉	통과 (6.54ms, 49.8MB)
// 테스트 20 〉	통과 (5.99ms, 43.7MB)
// 채점 결과
// 정확성: 100.0
// 합계: 100.0 / 100.0