function solution(k, tangerine) {
    var answer = 0;
    //갯수 담는 배열
    let arr = new Array(Math.max(...tangerine)).fill(0);
    //상자의 귤 갯수
    let box = 0;

    //귤 갯수 넣기
    for (let i = 0; i < tangerine.length; i++) {
        arr[tangerine[i] - 1]++;
    }

    arr.sort((a, b) => b - a);

    let a = 0;
    //귤 상자에 넣기
    while (box < k) {
        //시간 초과
        // box+=arr.shift()
        box += arr[a];
        a++;
        answer++;
    }
    return answer;
}

// 정확성  테스트
// 테스트 1 〉	통과 (3.62ms, 39.1MB)
// 테스트 2 〉	통과 (3.09ms, 39.1MB)
// 테스트 3 〉	통과 (3.04ms, 39.1MB)
// 테스트 4 〉	통과 (2.94ms, 39.1MB)
// 테스트 5 〉	통과 (4.87ms, 38.9MB)
// 테스트 6 〉	통과 (3.06ms, 39MB)
// 테스트 7 〉	통과 (4.96ms, 39MB)
// 테스트 8 〉	통과 (5.02ms, 39MB)
// 테스트 9 〉	통과 (3.06ms, 39.1MB)
// 테스트 10 〉	통과 (4.81ms, 39MB)
// 테스트 11 〉	통과 (328.89ms, 185MB)
// 테스트 12 〉	통과 (0.07ms, 33.5MB)
// 테스트 13 〉	통과 (0.06ms, 33.4MB)
// 테스트 14 〉	통과 (0.07ms, 33.5MB)
// 테스트 15 〉	통과 (0.07ms, 33.5MB)
// 테스트 16 〉	통과 (0.05ms, 33.5MB)
// 테스트 17 〉	통과 (0.07ms, 33.4MB)
// 테스트 18 〉	통과 (0.06ms, 33.5MB)
// 테스트 19 〉	통과 (0.06ms, 33.5MB)
// 테스트 20 〉	통과 (0.06ms, 33.6MB)
// 테스트 21 〉	통과 (0.21ms, 33.6MB)
// 테스트 22 〉	통과 (0.62ms, 33.6MB)
// 테스트 23 〉	통과 (0.90ms, 33.6MB)
// 테스트 24 〉	통과 (0.84ms, 33.7MB)
// 테스트 25 〉	통과 (3.10ms, 36.1MB)
// 테스트 26 〉	통과 (13.24ms, 39.3MB)
// 테스트 27 〉	통과 (549.10ms, 194MB)
// 테스트 28 〉	통과 (347.83ms, 192MB)
// 테스트 29 〉	통과 (388.42ms, 193MB)
// 테스트 30 〉	통과 (570.71ms, 193MB)
// 테스트 31 〉	통과 (328.79ms, 192MB)
// 테스트 32 〉	통과 (340.38ms, 192MB)
// 테스트 33 〉	통과 (212.50ms, 119MB)
// 테스트 34 〉	통과 (190.21ms, 118MB)
// 채점 결과
// 정확성: 100.0
// 합계: 100.0 / 100.0
